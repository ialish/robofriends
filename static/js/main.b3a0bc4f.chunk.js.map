{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","actionTypes.js","actions.js","api/api.js","containers/App.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","id","name","email","className","src","alt","CardList","robots","map","user","key","SearchBox","onSearchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","REQUEST_ROBOTS","requestRobots","dispatch","url","fetch","then","response","json","apiCall","users","payload","catch","App","onRequestRobots","searchField","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","event","target","value","initialStateSearch","initialStateRequest","rootReducer","combineReducers","action","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b3a0bc4f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n\treturn (\r\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow shadow-5 tc'>\r\n\t\t\t<img src={`https://robohash.org/${id}?size=250x250`} alt='Robot' />\r\n\t\t\t<div>\r\n\t\t\t\t<h3>{name}</h3>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{robots.map((user) => {\r\n\t\t\t\treturn (\r\n\t\t\t\t\t<Card\r\n\t\t\t\t\t\tkey={user.id}\r\n\t\t\t\t\t\tid={user.id}\r\n\t\t\t\t\t\tname={user.name}\r\n\t\t\t\t\t\temail={user.email}\r\n\t\t\t\t\t/>\r\n\t\t\t\t);\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ onSearchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName = 'pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='search robots'\r\n\t\t\t\tonChange={onSearchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflow: 'auto', border: '1px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info) {\r\n\t\tthis.setState({ hasError: true });\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1>An ERROR has occurred!</h1>;\r\n\t\t}\r\n\t\treturn this.props.children;\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\nexport const REQUEST_ROBOTS = {\r\n\tPENDING: 'PENDING',\r\n\tSUCCESS: 'SUCCESS',\r\n\tFAILED: 'FAILED'\r\n};","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS } from './actionTypes'\r\nimport { apiCall } from './api/api'\r\n\r\nexport const setSearchField = (text) => {\r\n\treturn {\r\n\t\ttype: CHANGE_SEARCH_FIELD,\r\n\t\tpayload: text\r\n\t}\r\n}\r\n\r\nexport const requestRobots = () => {\r\n\treturn (dispatch) => {\r\n\t\tdispatch({ type: REQUEST_ROBOTS.PENDING });\r\n\t\tconst url = 'https://jsonplaceholder.typicode.com/users';\r\n\t\treturn apiCall(url)\r\n\t\t\t.then((users) => dispatch({\r\n\t\t\t\ttype: REQUEST_ROBOTS.SUCCESS,\r\n\t\t\t\tpayload: users\r\n\t\t\t}))\r\n\t\t\t.catch((error) => dispatch({\r\n\t\t\t\ttype: REQUEST_ROBOTS.FAILED,\r\n\t\t\t\tpayload: error\r\n\t\t\t}));\r\n\t}\r\n}","export const apiCall = (url) =>\r\n\tfetch(url).then((response) => response.json());","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nimport './App.css';\r\n\r\n// parameter state comes from index.js provider store state(rootReducers)\r\nconst mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\terror: state.requestRobots.error\r\n\t};\r\n}\r\n\r\n// dispatch the DOM changes to call an action.\r\n// mapStateToProps returns object, mapDispatchToProps returns function.\r\n// the function returns an object then uses connect to change the data from reducers.\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t};\r\n}\r\n\r\nclass App extends Component {\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter((robot) => \r\n\t\t\trobot.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t);\r\n\r\n\t\tif (isPending) {\r\n\t\t\treturn (\r\n\t\t\t\t<h1>Loading...</h1>\r\n\t\t\t);\r\n\t\t}\r\n\t\t\r\n\t\treturn (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<SearchBox onSearchChange={onSearchChange} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundary>\r\n\t\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t\t</ErrorBoundary>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\t\r\n}\r\n\r\n// action done from mapDispatchToProps will change state from mapStateToProps\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS } from './actionTypes'\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn {...state, ...{ searchField: action.payload }};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRequest = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRequest, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase REQUEST_ROBOTS.PENDING:\r\n\t\t\treturn {...state, ...{ isPending: true }};\r\n\t\tcase REQUEST_ROBOTS.SUCCESS:\r\n\t\t\treturn {...state, ...{ robots: action.payload, isPending: false }};\r\n\t\tcase REQUEST_ROBOTS.FAILED:\r\n\t\t\treturn {...state, ...{ error: action.payload, isPending: false }};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './containers/App';\nimport 'tachyons';\n\nimport { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\nimport { searchRobots, requestRobots } from './reducers';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}